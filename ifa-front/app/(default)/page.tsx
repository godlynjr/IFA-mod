"use client";

import { useState } from "react";
import jsPDF from "jspdf";
import Sidebar from "@/components/ui/sidebar";
import PatientOverview from "@/components/PatientOverview";
import HealthMetricsGrid from "@/components/HealthMetricsGrid";
import HealthMetricsChart from "@/components/HealthMetricsChart";
import RedButton from "@/components/ui/Button";
import InsightsSection from "@/components/InsightsSection";

interface Patient {
  id: string;
  name: string;
  lastName: string;
  gender: string;
  birthDate: string;
  height: number;
  weight: number;
  metrics: Record<string, any>;
}

export default function Home() {
  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);
  const [selectedTimeframe, setSelectedTimeframe] = useState("Daily");
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [showInsights, setShowInsights] = useState(false);
  const [loadingInsights, setLoadingInsights] = useState(false);

  // Timeframe options
  const timeframes = ["Live", "Daily", "Weekly", "Yearly"];

  // Generate PDF with patient data
  const downloadPDF = () => {
    if (!selectedPatient) return;

    const doc = new jsPDF();

    // Title
    doc.setFont("helvetica", "bold");
    doc.setFontSize(20);
    doc.text("Med Records", 105, 20, { align: "center" });

    // Patient Details
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.text(`Patient Name: ${selectedPatient.name} ${selectedPatient.lastName}`, 20, 40);
    doc.text(`Birth Date: ${selectedPatient.birthDate}`, 20, 50);
    doc.text(`Gender: ${selectedPatient.gender}`, 20, 60);
    doc.text(`Height: ${selectedPatient.height} cm`, 20, 70);
    doc.text(`Weight: ${selectedPatient.weight} kg`, 20, 80);

    // Health Metrics
    doc.setFont("helvetica", "bold");
    doc.text("Health Metrics", 20, 100);
    doc.setFont("helvetica", "normal");

    const metrics = selectedPatient.metrics;
    const metricKeys = Object.keys(metrics);

    let yPos = 110;
    metricKeys.forEach((key) => {
      const data = metrics[key]?.data;
      if (data) {
        doc.text(`- ${key}: ${data.overall_avg.toFixed(2)}`, 20, yPos);
        yPos += 10;
      }
    });

    // Footer
    doc.setFontSize(10);
    doc.text("Generated by Med Records", 20, yPos + 10);
    doc.text("Â© 2024 Med Records Inc.", 20, yPos + 20);

    doc.save(`${selectedPatient.name}_Med_Records.pdf`);
  };

  const handleShowInsights = () => {
    setLoadingInsights(true);
    setTimeout(() => {
      setLoadingInsights(false);
      setShowInsights(true);
    }, 3000); // Simulates loading for 3 seconds
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div
        className={`fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transition-transform transform ${
          sidebarOpen ? "translate-x-0" : "-translate-x-64"
        } md:translate-x-0 md:static md:w-64`}
      >
        <Sidebar onSelectPatient={setSelectedPatient} />
      </div>

      {/* Mobile Sidebar Toggle Button */}
      <button
        className="absolute top-4 left-4 z-50 md:hidden bg-red-500 text-white p-2 rounded"
        onClick={() => setSidebarOpen(!sidebarOpen)}
      >
        â˜°
      </button>

      {/* Main Content */}
      <div className="flex-1 flex flex-col p-6 overflow-auto h-screen">
        {/* Header */}
        <div className="flex justify-between items-center m-4">
          <h1 className="text-3xl font-bold">Greetings</h1>

          {/* Download PDF Button (Only visible if a patient is selected) */}
          {selectedPatient && (
            <div className="flex gap-3">
              <RedButton text="ðŸ“„ Download PDF" onClick={downloadPDF} />
            </div>
          )}
        </div>

        <hr className="border-gray-300 mb-6" />

        {/* Patient Overview */}
        <PatientOverview patient={selectedPatient} />

        {/* Timeframe Selector */}
        {selectedPatient && (
          <div className="relative my-4 w-40">
            <RedButton text={selectedTimeframe} onClick={() => setDropdownOpen(!dropdownOpen)} />
            {dropdownOpen && (
              <div className="absolute mt-2 w-40 bg-white shadow-lg rounded-md z-10">
                {timeframes.map((timeframe) => (
                  <button
                    key={timeframe}
                    onClick={() => {
                      setSelectedTimeframe(timeframe);
                      setDropdownOpen(false);
                    }}
                    className="block px-4 py-2 text-gray-700 hover:bg-gray-200 w-full text-left"
                  >
                    {timeframe}
                  </button>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Content */}
        <div>
          <HealthMetricsGrid patient={selectedPatient} timeframe={selectedTimeframe} />
          <HealthMetricsChart patient={selectedPatient} timeframe={selectedTimeframe} />

          {/* AI Insights */}
          {/* {selectedPatient && <InsightsSection patient={selectedPatient} />} */}
          {/* Full-Screen Loading Animation */}
        {loadingInsights && (
          <motion.div
            className="fixed inset-0 flex items-center justify-center bg-white bg-opacity-90 z-50"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <motion.div
              className="text-center text-gray-800 text-xl font-semibold"
              animate={{ opacity: [0, 1, 0], transition: { duration: 1.5, repeat: Infinity } }}
            >
              Loading Insights...
            </motion.div>
          </motion.div>
        )}

        {/* Insights Section (Appears at the Bottom After Loading) */}
        {showInsights && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="mt-10"
          >
            <InsightsSection patient={selectedPatient} />
          </motion.div>
        )}
        </div>
      </div>
    </div>
  );
}

"use client";

import { useState } from "react";
import jsPDF from "jspdf";
import Sidebar from "@/components/ui/sidebar";
import PatientOverview from "@/components/PatientOverview";
import HealthMetricsGrid from "@/components/HealthMetricsGrid";
import HealthMetricsChart from "@/components/HealthMetricsChart";
import RedButton from "@/components/ui/Button";
import InsightsSection from "@/components/InsightsSection";
import Image from "next/image";

export default function Home() {
  const [selectedPatient, setSelectedPatient] = useState(null);
  const [selectedTimeframe, setSelectedTimeframe] = useState("Daily");
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);

  // Sample Health Metrics (Replace with actual patient data)
  const healthMetrics = {
    heartRate: "72 bpm",
    stepCount: "12,345 steps",
    sleep: "7h 30m",
    oxygenSaturation: "98%",
    caloriesBurned: "2,100 kcal",
  };

  // Function to download patient data as PDF
  const downloadPDF = () => {
    if (!selectedPatient) return;

    const doc = new jsPDF();

    // Add Med Records Title
    doc.setFont("helvetica", "bold");
    doc.setFontSize(20);
    doc.text("Med Records", 105, 20, { align: "center" });

    // Add Logo (Optional: Ensure you have the logo in /public folder)
    const logoUrl = "/med-logo.png";
    doc.addImage(logoUrl, "PNG", 80, 30, 50, 15); // Adjust size and position as needed

    // Patient Details
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.text(`Patient Name: ${selectedPatient.name} ${selectedPatient.lastName}`, 20, 60);
    doc.text(`Birth Date: ${selectedPatient.birthDate}`, 20, 70);
    doc.text(`Gender: ${selectedPatient.gender}`, 20, 80);
    doc.text(`Height: ${selectedPatient.height} cm`, 20, 90);
    doc.text(`Weight: ${selectedPatient.weight} kg`, 20, 100);

    // Health Metrics Section
    doc.setFont("helvetica", "bold");
    doc.text("Health Metrics", 20, 120);
    doc.setFont("helvetica", "normal");
    doc.text(`- Heart Rate: ${healthMetrics.heartRate}`, 20, 130);
    doc.text(`- Step Count: ${healthMetrics.stepCount}`, 20, 140);
    doc.text(`- Sleep Duration: ${healthMetrics.sleep}`, 20, 150);
    doc.text(`- Oxygen Saturation: ${healthMetrics.oxygenSaturation}`, 20, 160);
    doc.text(`- Calories Burned: ${healthMetrics.caloriesBurned}`, 20, 170);

    // Footer
    doc.setFontSize(10);
    doc.text("Generated by Med Records", 20, 190);
    doc.text("Â© 2024 Med Records Inc.", 20, 200);

    // Save PDF
    doc.save(`${selectedPatient.name}_Med_Records.pdf`);
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar - Responsive */}
      <div className={`fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transition-transform transform ${
        sidebarOpen ? "translate-x-0" : "-translate-x-64"
      } md:translate-x-0 md:static md:w-64`}>
        <Sidebar onSelectPatient={setSelectedPatient} />
      </div>

      {/* Mobile Sidebar Toggle Button */}
      <button
        className="absolute top-4 left-4 z-50 md:hidden bg-red-500 text-white p-2 rounded"
        onClick={() => setSidebarOpen(!sidebarOpen)}
      >
        â˜°
      </button>

      {/* Main Content */}
      <div className="flex-1 flex flex-col p-6 overflow-auto h-screen">
        {/* Header with Greetings and Download Buttons */}
        <div className="flex justify-between items-center m-4">
          <h1 className="text-3xl font-bold">Greetings</h1>

          {/* Download Buttons (Only show when a patient is selected) */}
          {selectedPatient && (
            <div className="flex gap-3">
              <RedButton text="ðŸ“„ Download PDF" onClick={downloadPDF} />
            </div>
          )}
        </div>

        <hr className="border-gray-300 mb-6" />

        {/* Patient Overview */}
        <PatientOverview patient={selectedPatient} />

        {/* Timeframe Selector Button */}
        {selectedPatient && (
          <div className="relative my-4 w-40">
            <RedButton text={selectedTimeframe} onClick={() => setDropdownOpen(!dropdownOpen)} />
            {dropdownOpen && (
              <div className="absolute mt-2 w-40 bg-white shadow-lg rounded-md z-10">
                {["Live", "Daily", "Weekly", "Yearly"].map((timeframe) => (
                  <button
                    key={timeframe}
                    onClick={() => {
                      setSelectedTimeframe(timeframe);
                      setDropdownOpen(false);
                    }}
                    className="block px-4 py-2 text-gray-700 hover:bg-gray-200 w-full text-left"
                  >
                    {timeframe}
                  </button>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Content Wrapper */}
        <div className="">
          <HealthMetricsGrid patient={selectedPatient} timeframe={selectedTimeframe} />
          <HealthMetricsChart patient={selectedPatient} timeframe={selectedTimeframe} />

          {/* New Insights Section */}
          {selectedPatient && <InsightsSection patient={selectedPatient} />}
        </div>
      </div>
    </div>
  );
}

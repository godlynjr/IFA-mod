"use client";

import { useState } from "react";
import jsPDF from "jspdf";
import Sidebar from "@/components/ui/sidebar";
import PatientOverview from "@/components/PatientOverview";
import HealthMetricsGrid from "@/components/HealthMetricsGrid";
import HealthMetricsChart from "@/components/HealthMetricsChart";
import RedButton from "@/components/ui/Button";

interface Patient {
  id: string;
  name: string;
  lastName: string;
  gender: string;
  birthDate: string;
  height: number;
  weight: number;
  metrics: Record<string, any>;
}

export default function Home() {
  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);
  const [selectedTimeframe, setSelectedTimeframe] = useState("Daily");
  const [dropdownOpen, setDropdownOpen] = useState(false);

  // Function to generate and download patient report
  const downloadPDF = () => {
    if (!selectedPatient) return;
  
    const doc = new jsPDF();
  
    // Add Logo (Ensuring Proper Sizing)
    const logoUrl = "/med-logo.png"; // Ensure this image exists in /public folder
    const imgSize = 50; // Width & Height set to 50
    doc.addImage(logoUrl, "PNG", 80, 10, imgSize, imgSize); // Centered logo
  
    // Title
    doc.setFont("helvetica", "bold");
    doc.setFontSize(20);
    doc.text("Medical Report", 105, 70, { align: "center" });
  
    // Patient details
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.text(`Patient Name: ${selectedPatient.name} ${selectedPatient.lastName}`, 20, 90);
    doc.text(`Birth Date: ${selectedPatient.birthDate}`, 20, 100);
    doc.text(`Gender: ${selectedPatient.gender}`, 20, 110);
    doc.text(`Height: ${selectedPatient.height} cm`, 20, 120);
    doc.text(`Weight: ${selectedPatient.weight} kg`, 20, 130);
  
    let yOffset = 160; // Start below patient details
  
    // Add a section for health metrics if available
    if (selectedPatient.metrics) {
      doc.setFont("helvetica", "bold");
      doc.text("Health Metrics", 20, 150);
      doc.setFont("helvetica", "normal");
  
      // Extract and add metrics data
      const metrics = selectedPatient.metrics;
      const metricData = [
        { title: "Avg Heart Rate", value: metrics.heart?.data?.overall_avg, unit: "bpm" },
        { title: "VO2 Max", value: metrics.response_VO2max?.data?.overall_avg, unit: "ml/kg/min" },
        { title: "Respiratory Rate", value: metrics.response_respiratory?.data?.overall_avg, unit: "breaths/min" },
        { title: "Oxygen SPO2", value: metrics.response_oxygen?.data?.overall_avg, unit: "%" },
        { title: "Calories Burned", value: metrics.response_energy?.data?.overall_avg, unit: "kcal" },
        { title: "Step Count", value: metrics.response_timeseries_forecasting?.data?.overall_avg, unit: "steps" },
      ];
  
      metricData.forEach(({ title, value, unit }) => {
        if (value !== undefined) {
          doc.text(`${title}: ${parseFloat(value).toFixed(2)} ${unit}`, 20, yOffset);
          yOffset += 10; // Move down for next metric
        }
      });
    }
  
    // Footer
    doc.setFontSize(10);
    doc.text("Generated by Med Records", 20, yOffset + 20);
    doc.text("Â© 2024 Med Records Inc.", 20, yOffset + 30);
  
    // Save PDF
    doc.save(`${selectedPatient.name}_Med_Records.pdf`);
  };

  return (
    <div className="flex h-screen">
      {/* Sidebar */}
      <div className="w-64 h-screen bg-white shadow-lg">
        <Sidebar onSelectPatient={setSelectedPatient} />
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col p-6 overflow-auto bg-gray-100">
        {/* Header Section */}
        <div className="flex justify-between items-center mb-4">
          <h1 className="text-3xl font-bold">Greetings</h1>

          {/* Download PDF Button (Only visible when a patient is selected) */}
          {selectedPatient && <RedButton text="ðŸ“„ Download PDF" onClick={downloadPDF} />}
        </div>

        {/* Patient Overview */}
        <PatientOverview patient={selectedPatient} />

        {/* Timeframe Selector Button (Positioned Right After Patient Overview) */}
        {selectedPatient && (
          <div className="relative mt-6 w-40">
            <RedButton text={selectedTimeframe} onClick={() => setDropdownOpen(!dropdownOpen)} />
            {dropdownOpen && (
              <div className="absolute mt-2 w-40 bg-white shadow-md rounded-lg z-10">
                {["Live", "Daily", "Weekly", "Yearly"].map((timeframe) => (
                  <button
                    key={timeframe}
                    onClick={() => {
                      setSelectedTimeframe(timeframe);
                      setDropdownOpen(false);
                    }}
                    className="block px-4 py-2 w-full text-left text-gray-700 hover:bg-gray-200"
                  >
                    {timeframe}
                  </button>
                ))}
              </div>
            )}
          </div>
        )}

        {/* Health Metrics */}
        {selectedPatient && (
          <>
            <HealthMetricsGrid patient={selectedPatient} timeframe={selectedTimeframe} />
            <HealthMetricsChart patient={selectedPatient} timeframe={selectedTimeframe} />
          </>
        )}
      </div>
    </div>
  );
}